{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import { PayPalButton } from 'react-paypal-button-v2'\n// import { Link } from 'react-router-dom'\n// import { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap'\n// import { useDispatch, useSelector } from 'react-redux'\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n// const OrderScreen = ({ match, history }) => {\n//   const orderId = match.params.id\n//   const [sdkReady, setSdkReady] = useState(false)\n//   const dispatch = useDispatch()\n//   const orderDetails = useSelector((state) => state.orderDetails)\n//   const { order, loading, error } = orderDetails\n//   const orderPay = useSelector((state) => state.orderPay)\n//   const { loading: loadingPay, success: successPay } = orderPay\n//   const orderDeliver = useSelector((state) => state.orderDeliver)\n//   const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n//   const userLogin = useSelector((state) => state.userLogin)\n//   const { userInfo } = userLogin\n//   if (!loading) {\n//     //   Calculate prices\n//     const addDecimals = (num) => {\n//       return (Math.round(num * 100) / 100).toFixed(2)\n//     }\n//     order.itemsPrice = addDecimals(\n//       order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n//     )\n//   }\n//   useEffect(() => {\n//     if (!userInfo) {\n//       history.push('/login')\n//     }\n//     const addPayPalScript = async () => {\n//       const { data: clientId } = await axios.get('/api/config/paypal')\n//       const script = document.createElement('script')\n//       script.type = 'text/javascript'\n//       script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\n//       script.async = true\n//       script.onload = () => {\n//         setSdkReady(true)\n//       }\n//       document.body.appendChild(script)\n//     }\n//     if (!order || successPay || successDeliver || order._id !== orderId) {\n//       dispatch({ type: ORDER_PAY_RESET })\n//       dispatch({ type: ORDER_DELIVER_RESET })\n//       dispatch(getOrderDetails(orderId))\n//     } else if (!order.isPaid) {\n//       if (!window.paypal) {\n//         addPayPalScript()\n//       } else {\n//         setSdkReady(true)\n//       }\n//     }\n//   }, [dispatch, orderId, successPay, successDeliver, order])\n//   const successPaymentHandler = (paymentResult) => {\n//     console.log(paymentResult)\n//     dispatch(payOrder(orderId, paymentResult))\n//   }\n//   const deliverHandler = () => {\n//     dispatch(deliverOrder(order))\n//   }\n//   return loading ? (\n//     <Loader />\n//   ) : error ? (\n//     <Message variant='danger'>{error}</Message>\n//   ) : (\n//     <>\n//       <h1>Order {order._id}</h1>\n//       <Row>\n//         <Col md={8}>\n//           <ListGroup variant='flush'>\n//             <ListGroup.Item>\n//               <h2>Shipping</h2>\n//               <p>\n//                 <strong>Name: </strong> {order.user.name}\n//               </p>\n//               <p>\n//                 <strong>Email: </strong>{' '}\n//                 <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n//               </p>\n//               <p>\n//                 <strong>Address:</strong>\n//                 {order.shippingAddress.address}, {order.shippingAddress.city}{' '}\n//                 {order.shippingAddress.postalCode},{' '}\n//                 {order.shippingAddress.country}\n//               </p>\n//               {order.isDelivered ? (\n//                 <Message variant='success'>\n//                   Delivered on {order.deliveredAt}\n//                 </Message>\n//               ) : (\n//                 <Message variant='danger'>Not Delivered</Message>\n//               )}\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <h2>Payment Method</h2>\n//               <p>\n//                 <strong>Method: </strong>\n//                 {order.paymentMethod}\n//               </p>\n//               {order.isPaid ? (\n//                 <Message variant='success'>Paid on {order.paidAt}</Message>\n//               ) : (\n//                 <Message variant='danger'>Not Paid</Message>\n//               )}\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <h2>Order Items</h2>\n//               {order.orderItems.length === 0 ? (\n//                 <Message>Order is empty</Message>\n//               ) : (\n//                 <ListGroup variant='flush'>\n//                   {order.orderItems.map((item, index) => (\n//                     <ListGroup.Item key={index}>\n//                       <Row>\n//                         <Col md={1}>\n//                           <Image\n//                             src={item.image}\n//                             alt={item.name}\n//                             fluid\n//                             rounded\n//                           />\n//                         </Col>\n//                         <Col>\n//                           <Link to={`/product/${item.product}`}>\n//                             {item.name}\n//                           </Link>\n//                         </Col>\n//                         <Col md={4}>\n//                           {item.qty} x ${item.price} = ${item.qty * item.price}\n//                         </Col>\n//                       </Row>\n//                     </ListGroup.Item>\n//                   ))}\n//                 </ListGroup>\n//               )}\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//         <Col md={4}>\n//           <Card>\n//             <ListGroup variant='flush'>\n//               <ListGroup.Item>\n//                 <h2>Order Summary</h2>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Items</Col>\n//                   <Col>${order.itemsPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Shipping</Col>\n//                   <Col>${order.shippingPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Tax</Col>\n//                   <Col>${order.taxPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Total</Col>\n//                   <Col>${order.totalPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               {!order.isPaid && (\n//                 <ListGroup.Item>\n//                   {loadingPay && <Loader />}\n//                   {!sdkReady ? (\n//                     <Loader />\n//                   ) : (\n//                     <PayPalButton\n//                       amount={order.totalPrice}\n//                       onSuccess={successPaymentHandler}\n//                     />\n//                   )}\n//                 </ListGroup.Item>\n//               )}\n//               {loadingDeliver && <Loader />}\n//               {userInfo &&\n//                 userInfo.isAdmin &&\n//                 order.isPaid &&\n//                 !order.isDelivered && (\n//                   <ListGroup.Item>\n//                     <Button\n//                       type='button'\n//                       className='btn btn-block'\n//                       onClick={deliverHandler}\n//                     >\n//                       Mark As Delivered\n//                     </Button>\n//                   </ListGroup.Item>\n//                 )}\n//             </ListGroup>\n//           </Card>\n//         </Col>\n//       </Row>\n//     </>\n//   )\n// }\n// export default OrderScreen","map":{"version":3,"sources":["/home/eya/proshop_mern/frontend/src/screens/OrderScreen.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import { PayPalButton } from 'react-paypal-button-v2'\n// import { Link } from 'react-router-dom'\n// import { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap'\n// import { useDispatch, useSelector } from 'react-redux'\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n\n// const OrderScreen = ({ match, history }) => {\n//   const orderId = match.params.id\n\n//   const [sdkReady, setSdkReady] = useState(false)\n\n//   const dispatch = useDispatch()\n\n//   const orderDetails = useSelector((state) => state.orderDetails)\n//   const { order, loading, error } = orderDetails\n\n//   const orderPay = useSelector((state) => state.orderPay)\n//   const { loading: loadingPay, success: successPay } = orderPay\n\n//   const orderDeliver = useSelector((state) => state.orderDeliver)\n//   const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n//   const userLogin = useSelector((state) => state.userLogin)\n//   const { userInfo } = userLogin\n\n//   if (!loading) {\n//     //   Calculate prices\n//     const addDecimals = (num) => {\n//       return (Math.round(num * 100) / 100).toFixed(2)\n//     }\n\n//     order.itemsPrice = addDecimals(\n//       order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n//     )\n//   }\n\n//   useEffect(() => {\n//     if (!userInfo) {\n//       history.push('/login')\n//     }\n\n//     const addPayPalScript = async () => {\n//       const { data: clientId } = await axios.get('/api/config/paypal')\n//       const script = document.createElement('script')\n//       script.type = 'text/javascript'\n//       script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\n//       script.async = true\n//       script.onload = () => {\n//         setSdkReady(true)\n//       }\n//       document.body.appendChild(script)\n//     }\n\n//     if (!order || successPay || successDeliver || order._id !== orderId) {\n//       dispatch({ type: ORDER_PAY_RESET })\n//       dispatch({ type: ORDER_DELIVER_RESET })\n//       dispatch(getOrderDetails(orderId))\n//     } else if (!order.isPaid) {\n//       if (!window.paypal) {\n//         addPayPalScript()\n//       } else {\n//         setSdkReady(true)\n//       }\n//     }\n//   }, [dispatch, orderId, successPay, successDeliver, order])\n\n//   const successPaymentHandler = (paymentResult) => {\n//     console.log(paymentResult)\n//     dispatch(payOrder(orderId, paymentResult))\n//   }\n\n//   const deliverHandler = () => {\n//     dispatch(deliverOrder(order))\n//   }\n\n//   return loading ? (\n//     <Loader />\n//   ) : error ? (\n//     <Message variant='danger'>{error}</Message>\n//   ) : (\n//     <>\n//       <h1>Order {order._id}</h1>\n//       <Row>\n//         <Col md={8}>\n//           <ListGroup variant='flush'>\n//             <ListGroup.Item>\n//               <h2>Shipping</h2>\n//               <p>\n//                 <strong>Name: </strong> {order.user.name}\n//               </p>\n//               <p>\n//                 <strong>Email: </strong>{' '}\n//                 <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n//               </p>\n//               <p>\n//                 <strong>Address:</strong>\n//                 {order.shippingAddress.address}, {order.shippingAddress.city}{' '}\n//                 {order.shippingAddress.postalCode},{' '}\n//                 {order.shippingAddress.country}\n//               </p>\n//               {order.isDelivered ? (\n//                 <Message variant='success'>\n//                   Delivered on {order.deliveredAt}\n//                 </Message>\n//               ) : (\n//                 <Message variant='danger'>Not Delivered</Message>\n//               )}\n//             </ListGroup.Item>\n\n//             <ListGroup.Item>\n//               <h2>Payment Method</h2>\n//               <p>\n//                 <strong>Method: </strong>\n//                 {order.paymentMethod}\n//               </p>\n//               {order.isPaid ? (\n//                 <Message variant='success'>Paid on {order.paidAt}</Message>\n//               ) : (\n//                 <Message variant='danger'>Not Paid</Message>\n//               )}\n//             </ListGroup.Item>\n\n//             <ListGroup.Item>\n//               <h2>Order Items</h2>\n//               {order.orderItems.length === 0 ? (\n//                 <Message>Order is empty</Message>\n//               ) : (\n//                 <ListGroup variant='flush'>\n//                   {order.orderItems.map((item, index) => (\n//                     <ListGroup.Item key={index}>\n//                       <Row>\n//                         <Col md={1}>\n//                           <Image\n//                             src={item.image}\n//                             alt={item.name}\n//                             fluid\n//                             rounded\n//                           />\n//                         </Col>\n//                         <Col>\n//                           <Link to={`/product/${item.product}`}>\n//                             {item.name}\n//                           </Link>\n//                         </Col>\n//                         <Col md={4}>\n//                           {item.qty} x ${item.price} = ${item.qty * item.price}\n//                         </Col>\n//                       </Row>\n//                     </ListGroup.Item>\n//                   ))}\n//                 </ListGroup>\n//               )}\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//         <Col md={4}>\n//           <Card>\n//             <ListGroup variant='flush'>\n//               <ListGroup.Item>\n//                 <h2>Order Summary</h2>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Items</Col>\n//                   <Col>${order.itemsPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Shipping</Col>\n//                   <Col>${order.shippingPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Tax</Col>\n//                   <Col>${order.taxPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               <ListGroup.Item>\n//                 <Row>\n//                   <Col>Total</Col>\n//                   <Col>${order.totalPrice}</Col>\n//                 </Row>\n//               </ListGroup.Item>\n//               {!order.isPaid && (\n//                 <ListGroup.Item>\n//                   {loadingPay && <Loader />}\n//                   {!sdkReady ? (\n//                     <Loader />\n//                   ) : (\n//                     <PayPalButton\n//                       amount={order.totalPrice}\n//                       onSuccess={successPaymentHandler}\n//                     />\n//                   )}\n//                 </ListGroup.Item>\n//               )}\n//               {loadingDeliver && <Loader />}\n//               {userInfo &&\n//                 userInfo.isAdmin &&\n//                 order.isPaid &&\n//                 !order.isDelivered && (\n//                   <ListGroup.Item>\n//                     <Button\n//                       type='button'\n//                       className='btn btn-block'\n//                       onClick={deliverHandler}\n//                     >\n//                       Mark As Delivered\n//                     </Button>\n//                   </ListGroup.Item>\n//                 )}\n//             </ListGroup>\n//           </Card>\n//         </Col>\n//       </Row>\n//     </>\n//   )\n// }\n\n// export default OrderScreen\n"]},"metadata":{},"sourceType":"module"}