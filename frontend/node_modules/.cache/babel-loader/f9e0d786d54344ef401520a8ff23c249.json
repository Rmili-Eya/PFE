{"ast":null,"code":"// import axios from 'axios'\n// import { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n// import {\n//   ORDER_CREATE_REQUEST,\n//   ORDER_CREATE_SUCCESS,\n//   ORDER_CREATE_FAIL,\n//   ORDER_DETAILS_FAIL,\n//   ORDER_DETAILS_SUCCESS,\n//   ORDER_DETAILS_REQUEST,\n//   ORDER_PAY_FAIL,\n//   ORDER_PAY_SUCCESS,\n//   ORDER_PAY_REQUEST,\n//   ORDER_LIST_MY_REQUEST,\n//   ORDER_LIST_MY_SUCCESS,\n//   ORDER_LIST_MY_FAIL,\n//   ORDER_LIST_FAIL,\n//   ORDER_LIST_SUCCESS,\n//   ORDER_LIST_REQUEST,\n//   ORDER_DELIVER_FAIL,\n//   ORDER_DELIVER_SUCCESS,\n//   ORDER_DELIVER_REQUEST,\n// } from '../constants/orderConstants'\n// import { logout } from './userActions'\n// export const createOrder = (order) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_CREATE_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.post(`/api/orders`, order, config)\n//     dispatch({\n//       type: ORDER_CREATE_SUCCESS,\n//       payload: data,\n//     })\n//     dispatch({\n//       type: CART_CLEAR_ITEMS,\n//       payload: data,\n//     })\n//     localStorage.removeItem('cartItems')\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_CREATE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const getOrderDetails = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_DETAILS_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/orders/${id}`, config)\n//     dispatch({\n//       type: ORDER_DETAILS_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_DETAILS_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const payOrder = (orderId, paymentResult) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   try {\n//     dispatch({\n//       type: ORDER_PAY_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(\n//       `/api/orders/${orderId}/pay`,\n//       paymentResult,\n//       config\n//     )\n//     dispatch({\n//       type: ORDER_PAY_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_PAY_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const deliverOrder = (order) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_DELIVER_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(\n//       `/api/orders/${order._id}/deliver`,\n//       {},\n//       config\n//     )\n//     dispatch({\n//       type: ORDER_DELIVER_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_DELIVER_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const listMyOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_LIST_MY_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/orders/myorders`, config)\n//     dispatch({\n//       type: ORDER_LIST_MY_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_LIST_MY_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const listOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_LIST_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/orders`, config)\n//     dispatch({\n//       type: ORDER_LIST_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_LIST_FAIL,\n//       payload: message,\n//     })\n//   }\n// }","map":{"version":3,"sources":["/home/eya/proshop_mern/frontend/src/actions/orderActions.js"],"names":[],"mappingssourcesContent":["// import axios from 'axios'\n// import { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n// import {\n//   ORDER_CREATE_REQUEST,\n//   ORDER_CREATE_SUCCESS,\n//   ORDER_CREATE_FAIL,\n//   ORDER_DETAILS_FAIL,\n//   ORDER_DETAILS_SUCCESS,\n//   ORDER_DETAILS_REQUEST,\n//   ORDER_PAY_FAIL,\n//   ORDER_PAY_SUCCESS,\n//   ORDER_PAY_REQUEST,\n//   ORDER_LIST_MY_REQUEST,\n//   ORDER_LIST_MY_SUCCESS,\n//   ORDER_LIST_MY_FAIL,\n//   ORDER_LIST_FAIL,\n//   ORDER_LIST_SUCCESS,\n//   ORDER_LIST_REQUEST,\n//   ORDER_DELIVER_FAIL,\n//   ORDER_DELIVER_SUCCESS,\n//   ORDER_DELIVER_REQUEST,\n// } from '../constants/orderConstants'\n// import { logout } from './userActions'\n\n// export const createOrder = (order) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_CREATE_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.post(`/api/orders`, order, config)\n\n//     dispatch({\n//       type: ORDER_CREATE_SUCCESS,\n//       payload: data,\n//     })\n//     dispatch({\n//       type: CART_CLEAR_ITEMS,\n//       payload: data,\n//     })\n//     localStorage.removeItem('cartItems')\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_CREATE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n// export const getOrderDetails = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_DETAILS_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.get(`/api/orders/${id}`, config)\n\n//     dispatch({\n//       type: ORDER_DETAILS_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_DETAILS_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n// export const payOrder = (orderId, paymentResult) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   try {\n//     dispatch({\n//       type: ORDER_PAY_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.put(\n//       `/api/orders/${orderId}/pay`,\n//       paymentResult,\n//       config\n//     )\n\n//     dispatch({\n//       type: ORDER_PAY_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_PAY_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n// export const deliverOrder = (order) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_DELIVER_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.put(\n//       `/api/orders/${order._id}/deliver`,\n//       {},\n//       config\n//     )\n\n//     dispatch({\n//       type: ORDER_DELIVER_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_DELIVER_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n// export const listMyOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_LIST_MY_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.get(`/api/orders/myorders`, config)\n\n//     dispatch({\n//       type: ORDER_LIST_MY_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_LIST_MY_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n\n// export const listOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_LIST_REQUEST,\n//     })\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n\n//     const { data } = await axios.get(`/api/orders`, config)\n\n//     dispatch({\n//       type: ORDER_LIST_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_LIST_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}